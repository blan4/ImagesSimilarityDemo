// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: embedder.proto

#include "embedder.pb.h"
#include "embedder.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace embedder {

static const char* EmbedderService_method_names[] = {
  "/embedder.EmbedderService/Heartbeat",
  "/embedder.EmbedderService/Transform",
};

std::unique_ptr< EmbedderService::Stub> EmbedderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmbedderService::Stub> stub(new EmbedderService::Stub(channel));
  return stub;
}

EmbedderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Heartbeat_(EmbedderService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Transform_(EmbedderService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EmbedderService::Stub::Heartbeat(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::embedder::HeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void EmbedderService::Stub::experimental_async::Heartbeat(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::embedder::HeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void EmbedderService::Stub::experimental_async::Heartbeat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::embedder::HeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void EmbedderService::Stub::experimental_async::Heartbeat(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::embedder::HeartbeatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

void EmbedderService::Stub::experimental_async::Heartbeat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::embedder::HeartbeatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::embedder::HeartbeatResponse>* EmbedderService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::embedder::HeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::embedder::HeartbeatResponse>* EmbedderService::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::embedder::HeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, request, false);
}

::grpc::Status EmbedderService::Stub::Transform(::grpc::ClientContext* context, const ::embedder::Image& request, ::embedder::EmbeddingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Transform_, context, request, response);
}

void EmbedderService::Stub::experimental_async::Transform(::grpc::ClientContext* context, const ::embedder::Image* request, ::embedder::EmbeddingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Transform_, context, request, response, std::move(f));
}

void EmbedderService::Stub::experimental_async::Transform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::embedder::EmbeddingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Transform_, context, request, response, std::move(f));
}

void EmbedderService::Stub::experimental_async::Transform(::grpc::ClientContext* context, const ::embedder::Image* request, ::embedder::EmbeddingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Transform_, context, request, response, reactor);
}

void EmbedderService::Stub::experimental_async::Transform(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::embedder::EmbeddingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Transform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::embedder::EmbeddingResponse>* EmbedderService::Stub::AsyncTransformRaw(::grpc::ClientContext* context, const ::embedder::Image& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::embedder::EmbeddingResponse>::Create(channel_.get(), cq, rpcmethod_Transform_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::embedder::EmbeddingResponse>* EmbedderService::Stub::PrepareAsyncTransformRaw(::grpc::ClientContext* context, const ::embedder::Image& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::embedder::EmbeddingResponse>::Create(channel_.get(), cq, rpcmethod_Transform_, context, request, false);
}

EmbedderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmbedderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmbedderService::Service, ::google::protobuf::Empty, ::embedder::HeartbeatResponse>(
          std::mem_fn(&EmbedderService::Service::Heartbeat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmbedderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmbedderService::Service, ::embedder::Image, ::embedder::EmbeddingResponse>(
          std::mem_fn(&EmbedderService::Service::Transform), this)));
}

EmbedderService::Service::~Service() {
}

::grpc::Status EmbedderService::Service::Heartbeat(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::embedder::HeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmbedderService::Service::Transform(::grpc::ServerContext* context, const ::embedder::Image* request, ::embedder::EmbeddingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace embedder

